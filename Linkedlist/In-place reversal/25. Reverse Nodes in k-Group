/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
       if(head==NULL || k==1){
        return head;
       } 
         // Step 1: Check if there are at least k nodes
        ListNode* temp = head;
        int count = 0;
        while (temp != NULL && count < k) {
            temp = temp->next;
            count++;
        }
        
        // If less than k nodes, return as-is
        if (count < k) return head;


        ListNode* curr=head;
       ListNode* prev=NULL;
       ListNode* next=NULL;
       count=0;
       while(curr!=NULL &&count<k){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
        count++;
       }
       if(next!=NULL){
        head->next= reverseKGroup(next,k);
       }
       return prev;
    }
};
