class Solution {
public:
   int m,n;
   int B;
        void dfs(vector<vector<char>>& board, int i, int j){
      if (i < 0 || j < 0 || i >= m || j >= n || board[i][j]!= 'O')
            return;
            board[i][j]='B';

            dfs(board,i+1,j);
            dfs(board,i,j+1);
            dfs(board,i-1,j);
            dfs(board,i,j-1);
}
    void solve(vector<vector<char>>& board) { 
         m =board.size();
         if(m==0) return ;
         n= board[0].size();
//Boundary-row traversal start &end row
        for(int i=0; i<m;i++){
     
        if(board[i][0]=='O') dfs(board,i,0);
        if(board[i][n-1]=='O') dfs(board,i,n-1);
        
        }

        //Boundary-column traversal start &end column
        for(int j=0; j<n;j++){
     
        if(board[0][j]=='O') dfs(board,0,j);
        if(board[m-1][j]=='O') dfs(board,m-1,j);
        }

        
        for(int i=0 ;i<m;i++){
            for(int j=0;j<n;j++){
              if (board[i][j] == 'O') board[i][j] = 'X';
              if (board[i][j] == 'B') board[i][j] = 'O';

            }
        }
       
    }
};
