class Solution {
public:
vector<vector<int>> res;
 void backtrack(vector<int>& nums,vector<int> &path , int start) {

            res.push_back(path);
          

for(int i=start;i<nums.size();i++){
        if(i>start && nums[i]==nums[i-1]) continue;

           // 1. include nums[i]
        path.push_back(nums[i]);
        backtrack(nums, path, i + 1);
        path.pop_back();

       
    }

 }

    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
       vector<int> path;
       sort(nums.begin(),nums.end());
        backtrack(nums, path,0);
        return res;  
    }
};
